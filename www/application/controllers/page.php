<?php defined('SYSPATH') OR die('No direct access allowed.');
/**
 * Provides both static and dynamic content.
 * For a long time, these functions were in the welcome controller
 */
class Page_Controller extends Template_Controller {

	public $template = 'template';
	public $siteDesc = '';
	public $content = '';
	public $pagination = '';
	public $links = array();

	protected $db;	
	protected $siteObj;

	
	public function __construct(){		
		parent::__construct(); // This must be included	
		$this->siteObj = new Post_Model();
        $this->siteDesc = $this->siteObj->getSiteDescription();		
		$this->template->description = $this->siteDesc;

		$env = Kohana::config("config.environment");	
		$this->db = new Database($env);
		$this->itemsPerPage = Kohana::config("config.number_of_items");
		$this->pagination = new Pagination(array(
		    'base_url'    => '/page/view/', // base_url will default to current uri
		    'uri_segment'    => 'view', // pass a string as uri_segment to trigger former 'label' functionality
		    'total_items'    => $this->db->count_records("kh_timeline"), // use db count query here of course
		    'items_per_page' => $this->itemsPerPage, 
		    'style'          => 'hardcastle' // pick one from: classic (default), digg, extended, punbb, or add your own!		
		));
	}
	/*
	 * Provide data to static pages
	 * */
	public function view($pageId,$ajax=false){
		if($ajax){
			echo $this->pageAsJson($pageId);
			exit;			
		}else{
			$this->template->content = new View('welcome_content');
			
			$this->template->content->hotlinks = $this->pagination->render();
			$end = $this->getPageSqlEnd($pageId);
			$this->template->content->posts = $this->db->select("*")
			->from("kh_timeline")		
			->limit($this->itemsPerPage,$end)
			->orderby("id","asc")
			->get()
			->result_array(true);
			//
			$from = $end - $this->itemsPerPage;
			$this->template->title = "Pages {$from} to {$end}";//var_dump($this->pagination);
            $this->template->description = $this->siteDesc;
		}
	}
	private function getPageSqlEnd($pageId){
		return ($pageId * $this->itemsPerPage)-$this->itemsPerPage;		
	}
	/*
	 * Provide data as JSON
	 * */
	public function pageAsJson($pageId){				
		$end = $this->getPageSqlEnd($pageId);
		$data = $this->db->select("*")
		->from("kh_timeline")		
		->limit($this->itemsPerPage,$end)
		->orderby("id","asc")
		->get()
		->result_array(true);		
		$x = 0;
		$returned = array();
		kohana::log("debug","load page as JSON");
		foreach($data as $key => $value){
			$x++;		
			$contents = unserialize($value->content);
			$html = "";
			if(is_array($contents)){
				foreach($contents as $str){
					$html .= $str;
				}
			}			
			$returned[$key] = array(
				"index"=>"{$x}",
				"body"=>$html,
				"id"=>$value->id,	
				"title"=>$value->date);			 			
		}
		echo json_encode($returned);		
		exit;		
	}	
	/*
	 * Static content
	*/	
	public function __call($method, $arguments)
	{
		// Disable auto-rendering
		$this->auto_render = FALSE;

		// By defining a __call method, all pages routed to this controller
		// that result in 404 errors will be handled by this method, instead of
		// being displayed as "Page Not Found" errors.
		echo 'This text is generated by __call. ';
	}

} 
