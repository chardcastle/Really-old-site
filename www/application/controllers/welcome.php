<?php defined('SYSPATH') OR die('No direct access allowed.');
/**
 * Default Kohana controller. This controller should NOT be used in production.
 * It is for demonstration purposes only!
 *
 * @package    Core
 * @author     Kohana Team
 * @copyright  (c) 2007-2008 Kohana Team
 * @license    http://kohanaphp.com/license.html
 */
class Welcome_Controller extends Template_Controller {

	// Disable this controller when Kohana is set to production mode.
	// See http://docs.kohanaphp.com/installation/deployment for more details.
	const ALLOW_PRODUCTION = FALSE;

	// Set the name of the template to use
	public $template = 'kohana/template';
	private $db;
	
	public function index()
	{
		/*
		 * Useful snippets
		 * 	$this->template->content->test .= Kohana::debug($xml);
		 *  kohana::log("debug",Kohana::debug($post));	
		 */
		
		$this->db = new Database('local');
		// In Kohana, all views are loaded and treated as objects.
		$this->template->content = new View('welcome_content');
	
		// You can assign anything variable to a view by using standard OOP
		// methods. In my welcome view, the $title variable will be assigned
		// the value I give it here.
		$this->template->title = 'Welcome to Kohana!';

		// An array of links to display. Assiging variables to views is completely
		// asyncronous. Variables can be set in any order, and can be any type
		// of data, including objects.
		$this->template->content->links = array
		(
			'Home Page'     => 'http://kohanaphp.com/',
			'Documentation' => 'http://docs.kohanaphp.com/',
			'Forum'         => 'http://forum.kohanaphp.com/',
			'License'       => 'Kohana License.html',
			'Donate'        => 'http://kohanaphp.com/donate',
		);
		$this->template->content->test = "";
/* */
		//Get the most recent post
		$mostRecentPost = $this->db->select("created_dt")
		->from("kh_posts")		
		->limit(1)
		->orderby("created_dt","desc")
		->get()
		->result_array(true);				

		$mostRecentPost = $mostRecentPost[0]->created_dt;
				 		
		/*
		 * Look for new posts that are newer than the last lot. 
		 */
		// Parse an external atom feed		
		$myTummy = feed::parse('http://hardcastle.tumblr.com/rss');
		$myTweets = file_get_contents('https://query.yahooapis.com/v1/public/yql?q=select%20*%20from%20twitter.user.timeline%20where%20id%3D%22hardcastle%22&format=xml&env=store%3A%2F%2Fdatatables.org%2Falltableswithkeys');
		$repoName = "jQuery";
		$jQueryfeed = file_get_contents("http://query.yahooapis.com/v1/public/yql?q=select%20*%20from%20github.repo.commits%20where%20id%3D'jquery'%20and%20repo%3D'".strtolower($repoName)."'&format=xml&env=store%3A%2F%2Fdatatables.org%2Falltableswithkeys");
		$xml = new SimpleXMLElement($jQueryfeed);
		
		// jQuery github activity	
		foreach($xml->results->commits as $post){			
			foreach($post as $commit){				
				$created = strtotime($commit->{"committed-date"});
				if($created > $mostRecentPost){					
					// Yay, a new post, save it!				
					$this->db->insert("kh_posts",array(
						"title"=>"{$repoName}",
						"content"=>"{$commit->message}",
						"created_dt"=>"{$created}",					
						"modified_dt"=>time(),
						"type" => "gitcommit"
					));
					kohana::log("debug",Kohana::debug("Found a new ".$repoName." commit ... saved"));
				}
			}						
		}
		// Tweets
		$xml = new SimpleXMLElement($myTweets);		
		foreach($xml->results->entry as $post){			
			$created = strtotime($post->published);	
			if($created > $mostRecentPost){
				// Yay, a new post, save it!
				$this->db->insert("kh_posts",array(
					"title"=>"tweet",
					"content"=>"{$post->content}",
					"created_dt"=>"{$created}",					
					"modified_dt"=>time(),
					"type" => "tweet"
				));
				kohana::log("debug",Kohana::debug("Found a new Tweet ... saved"));
			}
			
		}		
		// Tumblr		
		foreach($myTummy as $post){
			$created = strtotime($post['pubDate']);
			if($created > $mostRecentPost){
				// Yay, a new post, save it!			
				$this->db->insert("kh_posts",array(
					"title"=>"tumblr",
					"content"=>"{$post['description']}",
					"created_dt"=>"{$created}",					
					"modified_dt"=>time(),
					"type" => "tumblr"
				));
				kohana::log("debug",Kohana::debug("Found a new Tumblr post ... saved"));
			}
		}
		/**/		
	}

	public function __call($method, $arguments)
	{
		// Disable auto-rendering
		$this->auto_render = FALSE;

		// By defining a __call method, all pages routed to this controller
		// that result in 404 errors will be handled by this method, instead of
		// being displayed as "Page Not Found" errors.
		echo 'This text is generated by __call. If you expected the index page, you need to use: welcome/index/'.substr(Router::$current_uri, 8);
	}

} // End Welcome Controller